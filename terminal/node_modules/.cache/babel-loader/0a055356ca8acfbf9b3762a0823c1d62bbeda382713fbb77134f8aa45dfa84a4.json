{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Chart from 'react-apexcharts';\nconst SpotQuotes = () => {\n  _s();\n  const [candleData, setCandleData] = useState([]);\n  useEffect(() => {\n    const eventSource = new EventSource('http://localhost:4000/spotDataStream');\n    eventSource.onmessage = event => {\n      const data = JSON.parse(event.data);\n      const T = parseInt(data.T);\n      const spot = parseFloat(data.p);\n      const q = parseFloat(data.q);\n      const x = getIntervalStart(T);\n      setCandleData(prev => {\n        if (prev.length === 0 || x > prev[prev.length - 1].x) {\n          const newCandle = {\n            x,\n            y: [spot, spot, spot, spot]\n          };\n          const newData = [...prev, newCandle];\n          if (newData.length > 50) {\n            newData.shift();\n          }\n        }\n      });\n    };\n  });\n\n  // Function to calculate the UTC timestamp for the start of the IST minute\n  const getIntervalStart = T => {\n    const T_sec = Math.floor(T / 1000); // Convert milliseconds to seconds\n    const IST_sec = T_sec + 19800; // Add 5.5 hours (19800 seconds)\n    const minute_ist = Math.floor(IST_sec / 60); // Floor to the minute\n    const interval_start_ist_sec = minute_ist * 60; // Start of the minute in IST\n    const interval_start_utc_sec = interval_start_ist_sec - 19800; // Convert back to UTC\n    return interval_start_utc_sec * 1000; // Convert to milliseconds\n  };\n};\n_s(SpotQuotes, \"MA+GXrdVJn+zAr2qxP/I/kOmSgw=\");\n_c = SpotQuotes;\nexport default SpotQuotes;\nvar _c;\n$RefreshReg$(_c, \"SpotQuotes\");","map":{"version":3,"names":["React","useState","useEffect","Chart","SpotQuotes","_s","candleData","setCandleData","eventSource","EventSource","onmessage","event","data","JSON","parse","T","parseInt","spot","parseFloat","p","q","x","getIntervalStart","prev","length","newCandle","y","newData","shift","T_sec","Math","floor","IST_sec","minute_ist","interval_start_ist_sec","interval_start_utc_sec","_c","$RefreshReg$"],"sources":["/Users/siddhanthmate/Desktop/AllFiles/CODE/StatArbXchange/terminal/src/pages/quotes.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Chart from 'react-apexcharts';\n\n\nconst SpotQuotes = () => {\n    const [candleData, setCandleData] = useState([]);\n\n    useEffect(() => {\n        const eventSource = new EventSource('http://localhost:4000/spotDataStream');\n        \n        eventSource.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            const T = parseInt(data.T);\n            const spot = parseFloat(data.p);\n            const q = parseFloat(data.q)\n            \n            const x = getIntervalStart(T);\n\n            setCandleData((prev) => {\n                if ((prev.length === 0) || (x > prev[prev.length - 1].x)) {\n                    const newCandle = { x, y: [spot,spot,spot,spot]};\n                    const newData = [...prev, newCandle];\n\n                    if (newData.length > 50){\n                        newData.shift();\n                    }\n                }\n            });\n        \n        }\n    \n    });\n\n\n    // Function to calculate the UTC timestamp for the start of the IST minute\n    const getIntervalStart = (T) => {\n        const T_sec = Math.floor(T / 1000); // Convert milliseconds to seconds\n        const IST_sec = T_sec + 19800; // Add 5.5 hours (19800 seconds)\n        const minute_ist = Math.floor(IST_sec / 60); // Floor to the minute\n        const interval_start_ist_sec = minute_ist * 60; // Start of the minute in IST\n        const interval_start_utc_sec = interval_start_ist_sec - 19800; // Convert back to UTC\n        return interval_start_utc_sec * 1000; // Convert to milliseconds\n    };\n};\n\n\nexport default SpotQuotes;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,kBAAkB;AAGpC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACZ,MAAMM,WAAW,GAAG,IAAIC,WAAW,CAAC,sCAAsC,CAAC;IAE3ED,WAAW,CAACE,SAAS,GAAIC,KAAK,IAAK;MAC/B,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;MACnC,MAAMG,CAAC,GAAGC,QAAQ,CAACJ,IAAI,CAACG,CAAC,CAAC;MAC1B,MAAME,IAAI,GAAGC,UAAU,CAACN,IAAI,CAACO,CAAC,CAAC;MAC/B,MAAMC,CAAC,GAAGF,UAAU,CAACN,IAAI,CAACQ,CAAC,CAAC;MAE5B,MAAMC,CAAC,GAAGC,gBAAgB,CAACP,CAAC,CAAC;MAE7BR,aAAa,CAAEgB,IAAI,IAAK;QACpB,IAAKA,IAAI,CAACC,MAAM,KAAK,CAAC,IAAMH,CAAC,GAAGE,IAAI,CAACA,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC,CAACH,CAAE,EAAE;UACtD,MAAMI,SAAS,GAAG;YAAEJ,CAAC;YAAEK,CAAC,EAAE,CAACT,IAAI,EAACA,IAAI,EAACA,IAAI,EAACA,IAAI;UAAC,CAAC;UAChD,MAAMU,OAAO,GAAG,CAAC,GAAGJ,IAAI,EAAEE,SAAS,CAAC;UAEpC,IAAIE,OAAO,CAACH,MAAM,GAAG,EAAE,EAAC;YACpBG,OAAO,CAACC,KAAK,CAAC,CAAC;UACnB;QACJ;MACJ,CAAC,CAAC;IAEN,CAAC;EAEL,CAAC,CAAC;;EAGF;EACA,MAAMN,gBAAgB,GAAIP,CAAC,IAAK;IAC5B,MAAMc,KAAK,GAAGC,IAAI,CAACC,KAAK,CAAChB,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IACpC,MAAMiB,OAAO,GAAGH,KAAK,GAAG,KAAK,CAAC,CAAC;IAC/B,MAAMI,UAAU,GAAGH,IAAI,CAACC,KAAK,CAACC,OAAO,GAAG,EAAE,CAAC,CAAC,CAAC;IAC7C,MAAME,sBAAsB,GAAGD,UAAU,GAAG,EAAE,CAAC,CAAC;IAChD,MAAME,sBAAsB,GAAGD,sBAAsB,GAAG,KAAK,CAAC,CAAC;IAC/D,OAAOC,sBAAsB,GAAG,IAAI,CAAC,CAAC;EAC1C,CAAC;AACL,CAAC;AAAC9B,EAAA,CAvCID,UAAU;AAAAgC,EAAA,GAAVhC,UAAU;AA0ChB,eAAeA,UAAU;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}