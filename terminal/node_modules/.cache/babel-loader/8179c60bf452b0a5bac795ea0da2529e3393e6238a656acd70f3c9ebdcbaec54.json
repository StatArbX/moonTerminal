{"ast":null,"code":"var _jsxFileName = \"/Users/siddhanthmate/Desktop/AllFiles/CODE/StatArbXchange/terminal/src/pages/quotes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotQuotes = () => {\n  _s();\n  const [candleData, setCandleData] = useState([]);\n  useEffect(() => {\n    const eventSource = new EventSource(\"http://localhost:4000/spotDataStream\");\n    eventSource.onmessage = event => {\n      const data = JSON.parse(event.data);\n      const T = parseInt(data.T);\n      const spot = parseFloat(data.p);\n      const q = parseFloat(data.q);\n      const x = getIntervalStart(T);\n      setCandleData(prev => {\n        // If no data or a new interval candle\n        if (prev.length === 0 || x > prev[prev.length - 1].x) {\n          const newCandle = {\n            x,\n            y: [spot, spot, spot, spot],\n            volume: q\n          };\n          const newData = [...prev, newCandle];\n          if (newData.length > 50) {\n            newData.shift();\n          }\n          return newData;\n        }\n        // If the incoming data belongs to the current candle\n        else if (x === prev[prev.length - 1].x) {\n          const lastCandle = {\n            ...prev[prev.length - 1]\n          };\n          const [open, high, low] = lastCandle.y;\n          const newHigh = Math.max(high, spot);\n          const newLow = Math.min(low, spot);\n          // Update candle's OHLC and add volume\n          lastCandle.y = [open, newHigh, newLow, spot];\n          lastCandle.volume = (lastCandle.volume || 0) + q;\n          return [...prev.slice(0, -1), lastCandle];\n        } else {\n          return prev;\n        }\n      });\n    };\n    return () => {\n      eventSource.close();\n    };\n  }, []);\n\n  // Calculate the start of the minute in UTC based on the IST adjustment\n  const getIntervalStart = T => {\n    const T_sec = Math.floor(T / 1000);\n    const IST_sec = T_sec + 19800; // 5.5 hours in seconds\n    const minute_ist = Math.floor(IST_sec / 60);\n    const interval_start_ist_sec = minute_ist * 60;\n    const interval_start_utc_sec = interval_start_ist_sec - 19800;\n    return interval_start_utc_sec * 1000;\n  };\n\n  // Candlestick chart options with dark theme and no grid lines\n  const candlestickOptions = {\n    chart: {\n      type: \"candlestick\",\n      height: 350,\n      background: \"#000\",\n      foreColor: \"#fff\"\n    },\n    title: {\n      text: \"Real-Time Spot Chart\",\n      align: \"left\",\n      style: {\n        color: \"#fff\"\n      }\n    },\n    xaxis: {\n      type: \"datetime\",\n      labels: {\n        formatter: function (val) {\n          return new Date(val).toLocaleString(\"en-IN\", {\n            timeZone: \"Asia/Kolkata\",\n            hour: \"2-digit\",\n            minute: \"2-digit\"\n          });\n        }\n      }\n    },\n    yaxis: {\n      tooltip: {\n        enabled: true\n      }\n    },\n    grid: {\n      show: false\n    }\n    // Removed global candlestick color settings to allow per-candle styling\n  };\n\n  // Prepare candlestick series applying hollow candle logic.\n  const candlestickSeries = [{\n    data: candleData.map(candle => {\n      const open = candle.y[0];\n      const close = candle.y[3];\n      if (close >= open) {\n        // Bullish candle: apply hollow style.\n        return {\n          x: candle.x,\n          y: candle.y,\n          fillColor: \"#000\",\n          // Use the chart background for a \"hollow\" effect\n          lineColor: \"#00B746\" // Outline in the upward (green) color\n        };\n      } else {\n        // Bearish candle: filled style.\n        return {\n          x: candle.x,\n          y: candle.y,\n          fillColor: \"#EF403C\",\n          // Filled with red\n          lineColor: \"#EF403C\"\n        };\n      }\n    })\n  }];\n\n  // Create volume data from candleData.\n  const volumeData = candleData.map(candle => {\n    const open = candle.y[0];\n    const close = candle.y[3];\n    return {\n      x: candle.x,\n      y: candle.volume,\n      fillColor: close >= open ? \"#00B746\" : \"#EF403C\"\n    };\n  });\n\n  // Volume chart options with dark theme and no grid lines\n  const volumeOptions = {\n    chart: {\n      type: \"bar\",\n      height: 100,\n      background: \"#000\",\n      foreColor: \"#fff\"\n    },\n    plotOptions: {\n      bar: {\n        columnWidth: \"80%\",\n        colors: {\n          ranges: [{\n            from: -1000,\n            to: 1000000000,\n            color: undefined\n          }]\n        }\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    xaxis: {\n      type: \"datetime\"\n    },\n    yaxis: {\n      labels: {\n        show: false\n      },\n      title: {\n        text: undefined\n      }\n    },\n    grid: {\n      show: false\n    }\n  };\n  const volumeSeries = [{\n    name: \"Volume\",\n    data: volumeData\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Chart, {\n      options: candlestickOptions,\n      series: candlestickSeries,\n      type: \"candlestick\",\n      height: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      options: volumeOptions,\n      series: volumeSeries,\n      type: \"bar\",\n      height: 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n_s(SpotQuotes, \"MA+GXrdVJn+zAr2qxP/I/kOmSgw=\");\n_c = SpotQuotes;\nexport default SpotQuotes;\n\n// import React, { useState, useEffect } from \"react\";\n// import Chart from \"react-apexcharts\";\n\n// const SpotQuotes = () => {\n//   const [candleData, setCandleData] = useState([]);\n\n//   useEffect(() => {\n//     const eventSource = new EventSource(\"http://localhost:4000/spotDataStream\");\n\n//     eventSource.onmessage = (event) => {\n//       const data = JSON.parse(event.data);\n//       const T = parseInt(data.T);\n//       const spot = parseFloat(data.p);\n//       const q = parseFloat(data.q);\n//       const x = getIntervalStart(T);\n\n//       setCandleData((prev) => {\n//         // If no data or a new interval candle\n//         if (prev.length === 0 || x > prev[prev.length - 1].x) {\n//           const newCandle = { \n//             x, \n//             y: [spot, spot, spot, spot], \n//             volume: q \n//           };\n//           const newData = [...prev, newCandle];\n//           if (newData.length > 50) {\n//             newData.shift();\n//           }\n//           return newData;\n//         } \n//         // If the incoming data belongs to the current candle\n//         else if (x === prev[prev.length - 1].x) {\n//           const lastCandle = { ...prev[prev.length - 1] };\n//           const [open, high, low] = lastCandle.y;\n//           const newHigh = Math.max(high, spot);\n//           const newLow = Math.min(low, spot);\n//           // Update candle's OHLC and add volume\n//           lastCandle.y = [open, newHigh, newLow, spot];\n//           lastCandle.volume = (lastCandle.volume || 0) + q;\n//           return [...prev.slice(0, -1), lastCandle];\n//         } else {\n//           return prev;\n//         }\n//       });\n//     };\n\n//     return () => {\n//       eventSource.close();\n//     };\n//   }, []);\n\n//   // Calculate the start of the minute in UTC based on the IST adjustment\n//   const getIntervalStart = (T) => {\n//     const T_sec = Math.floor(T / 1000);\n//     const IST_sec = T_sec + 19800; // 5.5 hours in seconds\n//     const minute_ist = Math.floor(IST_sec / 60);\n//     const interval_start_ist_sec = minute_ist * 60;\n//     const interval_start_utc_sec = interval_start_ist_sec - 19800;\n//     return interval_start_utc_sec * 1000;\n//   };\n\n//   // Candlestick chart options with dark theme and no grid lines\n//   const candlestickOptions = {\n//     chart: {\n//       type: \"candlestick\",\n//       height: 350,\n//       background: \"#000\",  // Dark background similar to Bloomberg\n//       foreColor: \"#fff\",   // White text\n//     },\n//     title: {\n//       text: \"Real-Time Spot Chart\",\n//       align: \"left\",\n//       style: {\n//         color: \"#fff\",\n//       },\n//     },\n//     xaxis: {\n//       type: \"datetime\",\n//       labels: {\n//         formatter: function (val) {\n//           return new Date(val).toLocaleString(\"en-IN\", {\n//             timeZone: \"Asia/Kolkata\",\n//             hour: \"2-digit\",\n//             minute: \"2-digit\",\n//           });\n//         },\n//       },\n//     },\n//     yaxis: {\n//       tooltip: {\n//         enabled: true,\n//       },\n//     },\n//     grid: {\n//       show: false,  // Remove grid lines\n//     },\n//     plotOptions: {\n//       candlestick: {\n//         colors: {\n//           upward: \"#00B746\", // Green for rising candles\n//           downward: \"#EF403C\", // Red for falling candles\n//         },\n//       },\n//     },\n//   };\n\n//   // Prepare candlestick series from candleData\n//   const candlestickSeries = [\n//     {\n//       data: candleData.map((candle) => ({\n//         x: candle.x,\n//         y: candle.y,\n//       })),\n//     },\n//   ];\n\n//   // Create volume data from candleData. For each candle, if the close >= open, color green; otherwise red.\n//   const volumeData = candleData.map((candle) => {\n//     const open = candle.y[0];\n//     const close = candle.y[3];\n//     return {\n//       x: candle.x,\n//       y: candle.volume,\n//       // The fillColor property will be used in the bar chart to color the volume bar\n//       fillColor: close >= open ? \"#00B746\" : \"#EF403C\",\n//     };\n//   });\n\n//   // Volume chart options with no grid lines and dark theme\n//   const volumeOptions = {\n//     chart: {\n//       type: \"bar\",\n//       height: 100,\n//       background: \"#000\",\n//       foreColor: \"#fff\",\n//     },\n//     plotOptions: {\n//       bar: {\n//         columnWidth: \"80%\",\n//         // We are manually setting the fillColor on each data point\n//         colors: {\n//           ranges: [\n//             {\n//               from: -1000,\n//               to: 1000000000,\n//               color: undefined,\n//             },\n//           ],\n//         },\n//       },\n//     },\n//     dataLabels: {\n//       enabled: false,\n//     },\n//     xaxis: {\n//       type: \"datetime\",\n//     },\n//     yaxis: {\n//       labels: {\n//         show: false,\n//       },\n//       title: {\n//         text: undefined,\n//       },\n//     },\n//     grid: {\n//       show: false,\n//     },\n//   };\n\n//   const volumeSeries = [\n//     {\n//       name: \"Volume\",\n//       data: volumeData,\n//     },\n//   ];\n\n//   return (\n//     <div>\n//       <Chart\n//         options={candlestickOptions}\n//         series={candlestickSeries}\n//         type=\"candlestick\"\n//         height={350}\n//       />\n//       <Chart\n//         options={volumeOptions}\n//         series={volumeSeries}\n//         type=\"bar\"\n//         height={100}\n//       />\n//     </div>\n//   );\n// };\n\n// export default SpotQuotes;\n\n// import React, { useState, useEffect } from \"react\";\n// import Chart from 'react-apexcharts';\n\n// const SpotQuotes = () => {\n//     const [candleData, setCandleData] = useState([]);\n\n//     useEffect(() => {\n//         const eventSource = new EventSource('http://localhost:4000/spotDataStream');\n\n//         eventSource.onmessage = (event) => {\n//             const data = JSON.parse(event.data);\n//             console.log(data);\n//             const T = parseInt(data.T);\n//             const spot = parseFloat(data.p);\n//             const q = parseFloat(data.q)\n\n//             const x = getIntervalStart(T);\n\n//             setCandleData((prev) => {\n//                 if ((prev.length === 0) || (x > prev[prev.length - 1].x)) {\n//                     const newCandle = { x, y: [spot,spot,spot,spot]};\n//                     const newData = [...prev, newCandle];\n\n//                     if (newData.length > 50){\n//                         newData.shift();\n//                     }\n//                     return newData;\n//                 } else if (x === prev[prev.length-1]) {\n//                     const lastCandle = {...prev[prev.length-1]};\n//                     const [open, high, low, close] = lastCandle.y;\n//                     const newHigh = Math.max(high, spot);\n//                     const newLow = Math.min(low, spot);\n//                     lastCandle.y = [open, newHigh, newLow, spot];\n//                     return [...prev.slice(0,-1), lastCandle];\n//                 } else {\n//                     return prev;\n//                 }                \n//             });\n//         };\n\n//         return () => {\n//             eventSource.close();\n//         };\n//     }, []);\n\n//     // Function to calculate the UTC timestamp for the start of the IST minute\n//     const getIntervalStart = (T) => {\n//         const T_sec = Math.floor(T / 1000); // Convert milliseconds to seconds\n//         const IST_sec = T_sec + 19800; // Add 5.5 hours (19800 seconds)\n//         const minute_ist = Math.floor(IST_sec / 60); // Floor to the minute\n//         const interval_start_ist_sec = minute_ist * 60; // Start of the minute in IST\n//         const interval_start_utc_sec = interval_start_ist_sec - 19800; // Convert back to UTC\n//         return interval_start_utc_sec * 1000; // Convert to milliseconds\n//     };\n\n//     const options = {\n//             chart: {\n//                 type: 'candlestick',\n//                 height: 350,\n//             },\n//             xaxis: {\n//                 type: 'datetime',\n//                 labels: {\n//                 formatter: function (val) {\n//                     return new Date(val).toLocaleString('en-IN', {\n//                         timeZone: 'Asia/Kolkata',\n//                         hour: '2-digit',\n//                         minute: '2-digit',\n//                     });\n//                 },\n//                 },\n//             },\n//             yaxis: {\n//                 tooltip: {\n//                     enabled: true,\n//             },\n//         },      \n//     };\n//     const series = [\n//         {\n//           data: candleData, // Array of { x: timestamp, y: [open, high, low, close] }\n//         },\n//       ];\n\n//       return (\n//         <div>\n//           <h1>Real-Time Spot Chart</h1>\n//           <Chart\n//             options={options}\n//             series={series}\n//             type=\"candlestick\"\n//             height={350}\n//           />\n//         </div>\n//       );\n// };\n\n// export default SpotQuotes;\nvar _c;\n$RefreshReg$(_c, \"SpotQuotes\");","map":{"version":3,"names":["React","useState","useEffect","Chart","jsxDEV","_jsxDEV","SpotQuotes","_s","candleData","setCandleData","eventSource","EventSource","onmessage","event","data","JSON","parse","T","parseInt","spot","parseFloat","p","q","x","getIntervalStart","prev","length","newCandle","y","volume","newData","shift","lastCandle","open","high","low","newHigh","Math","max","newLow","min","slice","close","T_sec","floor","IST_sec","minute_ist","interval_start_ist_sec","interval_start_utc_sec","candlestickOptions","chart","type","height","background","foreColor","title","text","align","style","color","xaxis","labels","formatter","val","Date","toLocaleString","timeZone","hour","minute","yaxis","tooltip","enabled","grid","show","candlestickSeries","map","candle","fillColor","lineColor","volumeData","volumeOptions","plotOptions","bar","columnWidth","colors","ranges","from","to","undefined","dataLabels","volumeSeries","name","children","options","series","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/siddhanthmate/Desktop/AllFiles/CODE/StatArbXchange/terminal/src/pages/quotes.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Chart from \"react-apexcharts\";\n\nconst SpotQuotes = () => {\n  const [candleData, setCandleData] = useState([]);\n\n  useEffect(() => {\n    const eventSource = new EventSource(\"http://localhost:4000/spotDataStream\");\n\n    eventSource.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      const T = parseInt(data.T);\n      const spot = parseFloat(data.p);\n      const q = parseFloat(data.q);\n      const x = getIntervalStart(T);\n\n      setCandleData((prev) => {\n        // If no data or a new interval candle\n        if (prev.length === 0 || x > prev[prev.length - 1].x) {\n          const newCandle = { \n            x, \n            y: [spot, spot, spot, spot], \n            volume: q \n          };\n          const newData = [...prev, newCandle];\n          if (newData.length > 50) {\n            newData.shift();\n          }\n          return newData;\n        } \n        // If the incoming data belongs to the current candle\n        else if (x === prev[prev.length - 1].x) {\n          const lastCandle = { ...prev[prev.length - 1] };\n          const [open, high, low] = lastCandle.y;\n          const newHigh = Math.max(high, spot);\n          const newLow = Math.min(low, spot);\n          // Update candle's OHLC and add volume\n          lastCandle.y = [open, newHigh, newLow, spot];\n          lastCandle.volume = (lastCandle.volume || 0) + q;\n          return [...prev.slice(0, -1), lastCandle];\n        } else {\n          return prev;\n        }\n      });\n    };\n\n    return () => {\n      eventSource.close();\n    };\n  }, []);\n\n  // Calculate the start of the minute in UTC based on the IST adjustment\n  const getIntervalStart = (T) => {\n    const T_sec = Math.floor(T / 1000);\n    const IST_sec = T_sec + 19800; // 5.5 hours in seconds\n    const minute_ist = Math.floor(IST_sec / 60);\n    const interval_start_ist_sec = minute_ist * 60;\n    const interval_start_utc_sec = interval_start_ist_sec - 19800;\n    return interval_start_utc_sec * 1000;\n  };\n\n  // Candlestick chart options with dark theme and no grid lines\n  const candlestickOptions = {\n    chart: {\n      type: \"candlestick\",\n      height: 350,\n      background: \"#000\",\n      foreColor: \"#fff\",\n    },\n    title: {\n      text: \"Real-Time Spot Chart\",\n      align: \"left\",\n      style: {\n        color: \"#fff\",\n      },\n    },\n    xaxis: {\n      type: \"datetime\",\n      labels: {\n        formatter: function (val) {\n          return new Date(val).toLocaleString(\"en-IN\", {\n            timeZone: \"Asia/Kolkata\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          });\n        },\n      },\n    },\n    yaxis: {\n      tooltip: {\n        enabled: true,\n      },\n    },\n    grid: {\n      show: false,\n    },\n    // Removed global candlestick color settings to allow per-candle styling\n  };\n\n  // Prepare candlestick series applying hollow candle logic.\n  const candlestickSeries = [\n    {\n      data: candleData.map((candle) => {\n        const open = candle.y[0];\n        const close = candle.y[3];\n        if (close >= open) {\n          // Bullish candle: apply hollow style.\n          return {\n            x: candle.x,\n            y: candle.y,\n            fillColor: \"#000\",      // Use the chart background for a \"hollow\" effect\n            lineColor: \"#00B746\",   // Outline in the upward (green) color\n          };\n        } else {\n          // Bearish candle: filled style.\n          return {\n            x: candle.x,\n            y: candle.y,\n            fillColor: \"#EF403C\",   // Filled with red\n            lineColor: \"#EF403C\",\n          };\n        }\n      }),\n    },\n  ];\n\n  // Create volume data from candleData.\n  const volumeData = candleData.map((candle) => {\n    const open = candle.y[0];\n    const close = candle.y[3];\n    return {\n      x: candle.x,\n      y: candle.volume,\n      fillColor: close >= open ? \"#00B746\" : \"#EF403C\",\n    };\n  });\n\n  // Volume chart options with dark theme and no grid lines\n  const volumeOptions = {\n    chart: {\n      type: \"bar\",\n      height: 100,\n      background: \"#000\",\n      foreColor: \"#fff\",\n    },\n    plotOptions: {\n      bar: {\n        columnWidth: \"80%\",\n        colors: {\n          ranges: [\n            {\n              from: -1000,\n              to: 1000000000,\n              color: undefined,\n            },\n          ],\n        },\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    xaxis: {\n      type: \"datetime\",\n    },\n    yaxis: {\n      labels: {\n        show: false,\n      },\n      title: {\n        text: undefined,\n      },\n    },\n    grid: {\n      show: false,\n    },\n  };\n\n  const volumeSeries = [\n    {\n      name: \"Volume\",\n      data: volumeData,\n    },\n  ];\n\n  return (\n    <div>\n      <Chart\n        options={candlestickOptions}\n        series={candlestickSeries}\n        type=\"candlestick\"\n        height={500}\n      />\n      <Chart\n        options={volumeOptions}\n        series={volumeSeries}\n        type=\"bar\"\n        height={100}\n      />\n    </div>\n  );\n};\n\nexport default SpotQuotes;\n\n\n// import React, { useState, useEffect } from \"react\";\n// import Chart from \"react-apexcharts\";\n\n// const SpotQuotes = () => {\n//   const [candleData, setCandleData] = useState([]);\n\n//   useEffect(() => {\n//     const eventSource = new EventSource(\"http://localhost:4000/spotDataStream\");\n\n//     eventSource.onmessage = (event) => {\n//       const data = JSON.parse(event.data);\n//       const T = parseInt(data.T);\n//       const spot = parseFloat(data.p);\n//       const q = parseFloat(data.q);\n//       const x = getIntervalStart(T);\n\n//       setCandleData((prev) => {\n//         // If no data or a new interval candle\n//         if (prev.length === 0 || x > prev[prev.length - 1].x) {\n//           const newCandle = { \n//             x, \n//             y: [spot, spot, spot, spot], \n//             volume: q \n//           };\n//           const newData = [...prev, newCandle];\n//           if (newData.length > 50) {\n//             newData.shift();\n//           }\n//           return newData;\n//         } \n//         // If the incoming data belongs to the current candle\n//         else if (x === prev[prev.length - 1].x) {\n//           const lastCandle = { ...prev[prev.length - 1] };\n//           const [open, high, low] = lastCandle.y;\n//           const newHigh = Math.max(high, spot);\n//           const newLow = Math.min(low, spot);\n//           // Update candle's OHLC and add volume\n//           lastCandle.y = [open, newHigh, newLow, spot];\n//           lastCandle.volume = (lastCandle.volume || 0) + q;\n//           return [...prev.slice(0, -1), lastCandle];\n//         } else {\n//           return prev;\n//         }\n//       });\n//     };\n\n//     return () => {\n//       eventSource.close();\n//     };\n//   }, []);\n\n//   // Calculate the start of the minute in UTC based on the IST adjustment\n//   const getIntervalStart = (T) => {\n//     const T_sec = Math.floor(T / 1000);\n//     const IST_sec = T_sec + 19800; // 5.5 hours in seconds\n//     const minute_ist = Math.floor(IST_sec / 60);\n//     const interval_start_ist_sec = minute_ist * 60;\n//     const interval_start_utc_sec = interval_start_ist_sec - 19800;\n//     return interval_start_utc_sec * 1000;\n//   };\n\n//   // Candlestick chart options with dark theme and no grid lines\n//   const candlestickOptions = {\n//     chart: {\n//       type: \"candlestick\",\n//       height: 350,\n//       background: \"#000\",  // Dark background similar to Bloomberg\n//       foreColor: \"#fff\",   // White text\n//     },\n//     title: {\n//       text: \"Real-Time Spot Chart\",\n//       align: \"left\",\n//       style: {\n//         color: \"#fff\",\n//       },\n//     },\n//     xaxis: {\n//       type: \"datetime\",\n//       labels: {\n//         formatter: function (val) {\n//           return new Date(val).toLocaleString(\"en-IN\", {\n//             timeZone: \"Asia/Kolkata\",\n//             hour: \"2-digit\",\n//             minute: \"2-digit\",\n//           });\n//         },\n//       },\n//     },\n//     yaxis: {\n//       tooltip: {\n//         enabled: true,\n//       },\n//     },\n//     grid: {\n//       show: false,  // Remove grid lines\n//     },\n//     plotOptions: {\n//       candlestick: {\n//         colors: {\n//           upward: \"#00B746\", // Green for rising candles\n//           downward: \"#EF403C\", // Red for falling candles\n//         },\n//       },\n//     },\n//   };\n\n//   // Prepare candlestick series from candleData\n//   const candlestickSeries = [\n//     {\n//       data: candleData.map((candle) => ({\n//         x: candle.x,\n//         y: candle.y,\n//       })),\n//     },\n//   ];\n\n//   // Create volume data from candleData. For each candle, if the close >= open, color green; otherwise red.\n//   const volumeData = candleData.map((candle) => {\n//     const open = candle.y[0];\n//     const close = candle.y[3];\n//     return {\n//       x: candle.x,\n//       y: candle.volume,\n//       // The fillColor property will be used in the bar chart to color the volume bar\n//       fillColor: close >= open ? \"#00B746\" : \"#EF403C\",\n//     };\n//   });\n\n//   // Volume chart options with no grid lines and dark theme\n//   const volumeOptions = {\n//     chart: {\n//       type: \"bar\",\n//       height: 100,\n//       background: \"#000\",\n//       foreColor: \"#fff\",\n//     },\n//     plotOptions: {\n//       bar: {\n//         columnWidth: \"80%\",\n//         // We are manually setting the fillColor on each data point\n//         colors: {\n//           ranges: [\n//             {\n//               from: -1000,\n//               to: 1000000000,\n//               color: undefined,\n//             },\n//           ],\n//         },\n//       },\n//     },\n//     dataLabels: {\n//       enabled: false,\n//     },\n//     xaxis: {\n//       type: \"datetime\",\n//     },\n//     yaxis: {\n//       labels: {\n//         show: false,\n//       },\n//       title: {\n//         text: undefined,\n//       },\n//     },\n//     grid: {\n//       show: false,\n//     },\n//   };\n\n//   const volumeSeries = [\n//     {\n//       name: \"Volume\",\n//       data: volumeData,\n//     },\n//   ];\n\n//   return (\n//     <div>\n//       <Chart\n//         options={candlestickOptions}\n//         series={candlestickSeries}\n//         type=\"candlestick\"\n//         height={350}\n//       />\n//       <Chart\n//         options={volumeOptions}\n//         series={volumeSeries}\n//         type=\"bar\"\n//         height={100}\n//       />\n//     </div>\n//   );\n// };\n\n// export default SpotQuotes;\n\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import Chart from 'react-apexcharts';\n\n\n\n\n// const SpotQuotes = () => {\n//     const [candleData, setCandleData] = useState([]);\n\n//     useEffect(() => {\n//         const eventSource = new EventSource('http://localhost:4000/spotDataStream');\n        \n//         eventSource.onmessage = (event) => {\n//             const data = JSON.parse(event.data);\n//             console.log(data);\n//             const T = parseInt(data.T);\n//             const spot = parseFloat(data.p);\n//             const q = parseFloat(data.q)\n            \n//             const x = getIntervalStart(T);\n\n//             setCandleData((prev) => {\n//                 if ((prev.length === 0) || (x > prev[prev.length - 1].x)) {\n//                     const newCandle = { x, y: [spot,spot,spot,spot]};\n//                     const newData = [...prev, newCandle];\n\n//                     if (newData.length > 50){\n//                         newData.shift();\n//                     }\n//                     return newData;\n//                 } else if (x === prev[prev.length-1]) {\n//                     const lastCandle = {...prev[prev.length-1]};\n//                     const [open, high, low, close] = lastCandle.y;\n//                     const newHigh = Math.max(high, spot);\n//                     const newLow = Math.min(low, spot);\n//                     lastCandle.y = [open, newHigh, newLow, spot];\n//                     return [...prev.slice(0,-1), lastCandle];\n//                 } else {\n//                     return prev;\n//                 }                \n//             });\n//         };\n        \n//         return () => {\n//             eventSource.close();\n//         };\n//     }, []);\n\n\n\n//     // Function to calculate the UTC timestamp for the start of the IST minute\n//     const getIntervalStart = (T) => {\n//         const T_sec = Math.floor(T / 1000); // Convert milliseconds to seconds\n//         const IST_sec = T_sec + 19800; // Add 5.5 hours (19800 seconds)\n//         const minute_ist = Math.floor(IST_sec / 60); // Floor to the minute\n//         const interval_start_ist_sec = minute_ist * 60; // Start of the minute in IST\n//         const interval_start_utc_sec = interval_start_ist_sec - 19800; // Convert back to UTC\n//         return interval_start_utc_sec * 1000; // Convert to milliseconds\n//     };\n\n\n//     const options = {\n//             chart: {\n//                 type: 'candlestick',\n//                 height: 350,\n//             },\n//             xaxis: {\n//                 type: 'datetime',\n//                 labels: {\n//                 formatter: function (val) {\n//                     return new Date(val).toLocaleString('en-IN', {\n//                         timeZone: 'Asia/Kolkata',\n//                         hour: '2-digit',\n//                         minute: '2-digit',\n//                     });\n//                 },\n//                 },\n//             },\n//             yaxis: {\n//                 tooltip: {\n//                     enabled: true,\n//             },\n//         },      \n//     };\n//     const series = [\n//         {\n//           data: candleData, // Array of { x: timestamp, y: [open, high, low, close] }\n//         },\n//       ];\n    \n//       return (\n//         <div>\n//           <h1>Real-Time Spot Chart</h1>\n//           <Chart\n//             options={options}\n//             series={series}\n//             type=\"candlestick\"\n//             height={350}\n//           />\n//         </div>\n//       );\n// };\n\n\n// export default SpotQuotes;"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}