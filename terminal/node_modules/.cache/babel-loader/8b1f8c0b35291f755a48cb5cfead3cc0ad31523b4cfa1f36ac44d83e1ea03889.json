{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import Chart from 'react-apexcharts';\n\n// const SpotQuotes = () => {\n//     const [candleData, setCandleData] = useState([]);\n\n//     useEffect(() => {\n//         const eventSource = new EventSource('http://localhost:4000/spotDataStream');\n\n//         eventSource.onmessage = (event) => {\n//             const data = JSON.parse(event.data);\n//             console.log(data);\n//             const T = parseInt(data.T);\n//             const spot = parseFloat(data.p);\n//             const q = parseFloat(data.q)\n\n//             const x = getIntervalStart(T);\n\n//             setCandleData((prev) => {\n//                 if ((prev.length === 0) || (x > prev[prev.length - 1].x)) {\n//                     const newCandle = { x, y: [spot,spot,spot,spot]};\n//                     const newData = [...prev, newCandle];\n\n//                     if (newData.length > 50){\n//                         newData.shift();\n//                     }\n//                     return newData;\n//                 } else if (x === prev[prev.length-1]) {\n//                     const lastCandle = {...prev[prev.length-1]};\n//                     const [open, high, low, close] = lastCandle.y;\n//                     const newHigh = Math.max(high, spot);\n//                     const newLow = Math.min(low, spot);\n//                     lastCandle.y = [open, newHigh, newLow, spot];\n//                     return [...prev.slice(0,-1), lastCandle];\n//                 } else {\n//                     return prev;\n//                 }                \n//             });\n//         };\n\n//         return () => {\n//             eventSource.close();\n//         };\n//     }, []);\n\n//     // Function to calculate the UTC timestamp for the start of the IST minute\n//     const getIntervalStart = (T) => {\n//         const T_sec = Math.floor(T / 1000); // Convert milliseconds to seconds\n//         const IST_sec = T_sec + 19800; // Add 5.5 hours (19800 seconds)\n//         const minute_ist = Math.floor(IST_sec / 60); // Floor to the minute\n//         const interval_start_ist_sec = minute_ist * 60; // Start of the minute in IST\n//         const interval_start_utc_sec = interval_start_ist_sec - 19800; // Convert back to UTC\n//         return interval_start_utc_sec * 1000; // Convert to milliseconds\n//     };\n\n//     const options = {\n//             chart: {\n//                 type: 'candlestick',\n//                 height: 350,\n//             },\n//             xaxis: {\n//                 type: 'datetime',\n//                 labels: {\n//                 formatter: function (val) {\n//                     return new Date(val).toLocaleString('en-IN', {\n//                         timeZone: 'Asia/Kolkata',\n//                         hour: '2-digit',\n//                         minute: '2-digit',\n//                     });\n//                 },\n//                 },\n//             },\n//             yaxis: {\n//                 tooltip: {\n//                     enabled: true,\n//             },\n//         },      \n//     };\n//     const series = [\n//         {\n//           data: candleData, // Array of { x: timestamp, y: [open, high, low, close] }\n//         },\n//       ];\n\n//       return (\n//         <div>\n//           <h1>Real-Time Spot Chart</h1>\n//           <Chart\n//             options={options}\n//             series={series}\n//             type=\"candlestick\"\n//             height={350}\n//           />\n//         </div>\n//       );\n// };\n\n// export default SpotQuotes;","map":{"version":3,"names":[],"sources":["/Users/siddhanthmate/Desktop/AllFiles/CODE/StatArbXchange/terminal/src/pages/quotes.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import Chart from 'react-apexcharts';\n\n\n\n\n// const SpotQuotes = () => {\n//     const [candleData, setCandleData] = useState([]);\n\n//     useEffect(() => {\n//         const eventSource = new EventSource('http://localhost:4000/spotDataStream');\n        \n//         eventSource.onmessage = (event) => {\n//             const data = JSON.parse(event.data);\n//             console.log(data);\n//             const T = parseInt(data.T);\n//             const spot = parseFloat(data.p);\n//             const q = parseFloat(data.q)\n            \n//             const x = getIntervalStart(T);\n\n//             setCandleData((prev) => {\n//                 if ((prev.length === 0) || (x > prev[prev.length - 1].x)) {\n//                     const newCandle = { x, y: [spot,spot,spot,spot]};\n//                     const newData = [...prev, newCandle];\n\n//                     if (newData.length > 50){\n//                         newData.shift();\n//                     }\n//                     return newData;\n//                 } else if (x === prev[prev.length-1]) {\n//                     const lastCandle = {...prev[prev.length-1]};\n//                     const [open, high, low, close] = lastCandle.y;\n//                     const newHigh = Math.max(high, spot);\n//                     const newLow = Math.min(low, spot);\n//                     lastCandle.y = [open, newHigh, newLow, spot];\n//                     return [...prev.slice(0,-1), lastCandle];\n//                 } else {\n//                     return prev;\n//                 }                \n//             });\n//         };\n        \n//         return () => {\n//             eventSource.close();\n//         };\n//     }, []);\n\n\n\n//     // Function to calculate the UTC timestamp for the start of the IST minute\n//     const getIntervalStart = (T) => {\n//         const T_sec = Math.floor(T / 1000); // Convert milliseconds to seconds\n//         const IST_sec = T_sec + 19800; // Add 5.5 hours (19800 seconds)\n//         const minute_ist = Math.floor(IST_sec / 60); // Floor to the minute\n//         const interval_start_ist_sec = minute_ist * 60; // Start of the minute in IST\n//         const interval_start_utc_sec = interval_start_ist_sec - 19800; // Convert back to UTC\n//         return interval_start_utc_sec * 1000; // Convert to milliseconds\n//     };\n\n\n//     const options = {\n//             chart: {\n//                 type: 'candlestick',\n//                 height: 350,\n//             },\n//             xaxis: {\n//                 type: 'datetime',\n//                 labels: {\n//                 formatter: function (val) {\n//                     return new Date(val).toLocaleString('en-IN', {\n//                         timeZone: 'Asia/Kolkata',\n//                         hour: '2-digit',\n//                         minute: '2-digit',\n//                     });\n//                 },\n//                 },\n//             },\n//             yaxis: {\n//                 tooltip: {\n//                     enabled: true,\n//             },\n//         },      \n//     };\n//     const series = [\n//         {\n//           data: candleData, // Array of { x: timestamp, y: [open, high, low, close] }\n//         },\n//       ];\n    \n//       return (\n//         <div>\n//           <h1>Real-Time Spot Chart</h1>\n//           <Chart\n//             options={options}\n//             series={series}\n//             type=\"candlestick\"\n//             height={350}\n//           />\n//         </div>\n//       );\n// };\n\n\n// export default SpotQuotes;"],"mappings":"AAAA;AACA;;AAKA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}