{"ast":null,"code":"var _jsxFileName = \"/Users/siddhanthmate/Desktop/AllFiles/CODE/StatArbXchange/terminal/src/pages/quotes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotQuotes = () => {\n  _s();\n  const [candleData, setCandleData] = useState([]);\n  useEffect(() => {\n    const eventSource = new EventSource(\"http://localhost:4000/spotDataStream\");\n    eventSource.onmessage = event => {\n      const data = JSON.parse(event.data);\n      const T = parseInt(data.T);\n      const spot = parseFloat(data.p);\n      const q = parseFloat(data.q);\n      const x = getIntervalStart(T);\n      setCandleData(prev => {\n        // If no data or a new interval candle\n        if (prev.length === 0 || x > prev[prev.length - 1].x) {\n          const newCandle = {\n            x,\n            y: [spot, spot, spot, spot],\n            volume: q\n          };\n          const newData = [...prev, newCandle];\n          if (newData.length > 50) {\n            newData.shift();\n          }\n          return newData;\n        }\n        // If the incoming data belongs to the current candle\n        else if (x === prev[prev.length - 1].x) {\n          const lastCandle = {\n            ...prev[prev.length - 1]\n          };\n          const [open, high, low] = lastCandle.y;\n          const newHigh = Math.max(high, spot);\n          const newLow = Math.min(low, spot);\n          // Update candle's OHLC and add volume\n          lastCandle.y = [open, newHigh, newLow, spot];\n          lastCandle.volume = (lastCandle.volume || 0) + q;\n          return [...prev.slice(0, -1), lastCandle];\n        } else {\n          return prev;\n        }\n      });\n    };\n    return () => {\n      eventSource.close();\n    };\n  }, []);\n\n  // Calculate the start of the minute in UTC based on the IST adjustment\n  const getIntervalStart = T => {\n    const T_sec = Math.floor(T / 1000);\n    const IST_sec = T_sec + 19800; // 5.5 hours in seconds\n    const minute_ist = Math.floor(IST_sec / 60);\n    const interval_start_ist_sec = minute_ist * 60;\n    const interval_start_utc_sec = interval_start_ist_sec - 19800;\n    return interval_start_utc_sec * 1000;\n  };\n\n  // Determine the current price from the latest candle.\n  const currentPrice = candleData.length > 0 ? candleData[candleData.length - 1].y[3] : null;\n\n  // Candlestick chart options with dark theme, no grid lines,\n  // and an annotation for the current price.\n  const candlestickOptions = {\n    chart: {\n      type: \"candlestick\",\n      height: 350,\n      background: \"#000\",\n      // Dark background\n      foreColor: \"#fff\" // White text\n    },\n    annotations: {\n      yaxis: currentPrice !== null ? [{\n        y: currentPrice,\n        borderColor: \"white\",\n        label: {\n          text: `Price: ${currentPrice}`,\n          style: {\n            fontSize: \"12px\",\n            color: \"#fff\",\n            background: \"transparent\"\n          },\n          borderColor: \"transparent\"\n        }\n      }] : []\n    },\n    title: {\n      text: \"Real-Time Spot Chart\",\n      align: \"center\",\n      offsetY: 10,\n      // adds 20px spacing from the top\n      style: {\n        color: \"#fff\"\n      }\n    },\n    xaxis: {\n      type: \"datetime\",\n      labels: {\n        formatter: function (val) {\n          return new Date(val).toLocaleString(\"en-IN\", {\n            timeZone: \"Asia/Kolkata\",\n            hour: \"2-digit\",\n            minute: \"2-digit\"\n          });\n        }\n      }\n    },\n    yaxis: {\n      tooltip: {\n        enabled: true\n      }\n    },\n    grid: {\n      show: false // Remove grid lines\n    }\n    // Removed global candlestick color settings to allow per-candle styling.\n  };\n\n  // Prepare candlestick series with hollow candle logic.\n  const candlestickSeries = [{\n    data: candleData.map(candle => {\n      const open = candle.y[0];\n      const close = candle.y[3];\n      if (close >= open) {\n        // Bullish candle: hollow look (fill same as background, outlined in green).\n        return {\n          x: candle.x,\n          y: candle.y,\n          fillColor: \"#000\",\n          // Matches chart background for a hollow effect\n          lineColor: \"#00B746\" // Upward (green) color outline\n        };\n      } else {\n        // Bearish candle: fully filled with red.\n        return {\n          x: candle.x,\n          y: candle.y,\n          fillColor: \"#EF403C\",\n          // Filled red\n          lineColor: \"#EF403C\"\n        };\n      }\n    })\n  }];\n\n  // Create volume data from candleData.\n  const volumeData = candleData.map(candle => {\n    const open = candle.y[0];\n    const close = candle.y[3];\n    return {\n      x: candle.x,\n      y: candle.volume,\n      fillColor: close >= open ? \"#00B746\" : \"#EF403C\"\n    };\n  });\n\n  // Volume chart options with dark theme and no grid lines.\n  const volumeOptions = {\n    chart: {\n      type: \"bar\",\n      height: 100,\n      background: \"#000\",\n      foreColor: \"#fff\"\n    },\n    plotOptions: {\n      bar: {\n        columnWidth: \"80%\",\n        colors: {\n          ranges: [{\n            from: -1000,\n            to: 1000000000,\n            color: undefined\n          }]\n        }\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    xaxis: {\n      type: \"datetime\"\n    },\n    yaxis: {\n      labels: {\n        show: false\n      },\n      title: {\n        text: undefined\n      }\n    },\n    grid: {\n      show: false\n    }\n  };\n  const volumeSeries = [{\n    name: \"Volume\",\n    data: volumeData\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Chart, {\n      options: candlestickOptions,\n      series: candlestickSeries,\n      type: \"candlestick\",\n      height: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      options: volumeOptions,\n      series: volumeSeries,\n      type: \"bar\",\n      height: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n_s(SpotQuotes, \"MA+GXrdVJn+zAr2qxP/I/kOmSgw=\");\n_c = SpotQuotes;\nexport default SpotQuotes;\nvar _c;\n$RefreshReg$(_c, \"SpotQuotes\");","map":{"version":3,"names":["React","useState","useEffect","Chart","jsxDEV","_jsxDEV","SpotQuotes","_s","candleData","setCandleData","eventSource","EventSource","onmessage","event","data","JSON","parse","T","parseInt","spot","parseFloat","p","q","x","getIntervalStart","prev","length","newCandle","y","volume","newData","shift","lastCandle","open","high","low","newHigh","Math","max","newLow","min","slice","close","T_sec","floor","IST_sec","minute_ist","interval_start_ist_sec","interval_start_utc_sec","currentPrice","candlestickOptions","chart","type","height","background","foreColor","annotations","yaxis","borderColor","label","text","style","fontSize","color","title","align","offsetY","xaxis","labels","formatter","val","Date","toLocaleString","timeZone","hour","minute","tooltip","enabled","grid","show","candlestickSeries","map","candle","fillColor","lineColor","volumeData","volumeOptions","plotOptions","bar","columnWidth","colors","ranges","from","to","undefined","dataLabels","volumeSeries","name","children","options","series","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/siddhanthmate/Desktop/AllFiles/CODE/StatArbXchange/terminal/src/pages/quotes.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Chart from \"react-apexcharts\";\n\nconst SpotQuotes = () => {\n  const [candleData, setCandleData] = useState([]);\n\n  useEffect(() => {\n    const eventSource = new EventSource(\"http://localhost:4000/spotDataStream\");\n\n    eventSource.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      const T = parseInt(data.T);\n      const spot = parseFloat(data.p);\n      const q = parseFloat(data.q);\n      const x = getIntervalStart(T);\n\n      setCandleData((prev) => {\n        // If no data or a new interval candle\n        if (prev.length === 0 || x > prev[prev.length - 1].x) {\n          const newCandle = { \n            x, \n            y: [spot, spot, spot, spot], \n            volume: q \n          };\n          const newData = [...prev, newCandle];\n          if (newData.length > 50) {\n            newData.shift();\n          }\n          return newData;\n        } \n        // If the incoming data belongs to the current candle\n        else if (x === prev[prev.length - 1].x) {\n          const lastCandle = { ...prev[prev.length - 1] };\n          const [open, high, low] = lastCandle.y;\n          const newHigh = Math.max(high, spot);\n          const newLow = Math.min(low, spot);\n          // Update candle's OHLC and add volume\n          lastCandle.y = [open, newHigh, newLow, spot];\n          lastCandle.volume = (lastCandle.volume || 0) + q;\n          return [...prev.slice(0, -1), lastCandle];\n        } else {\n          return prev;\n        }\n      });\n    };\n\n    return () => {\n      eventSource.close();\n    };\n  }, []);\n\n  // Calculate the start of the minute in UTC based on the IST adjustment\n  const getIntervalStart = (T) => {\n    const T_sec = Math.floor(T / 1000);\n    const IST_sec = T_sec + 19800; // 5.5 hours in seconds\n    const minute_ist = Math.floor(IST_sec / 60);\n    const interval_start_ist_sec = minute_ist * 60;\n    const interval_start_utc_sec = interval_start_ist_sec - 19800;\n    return interval_start_utc_sec * 1000;\n  };\n\n  // Determine the current price from the latest candle.\n  const currentPrice =\n    candleData.length > 0 ? candleData[candleData.length - 1].y[3] : null;\n\n  // Candlestick chart options with dark theme, no grid lines,\n  // and an annotation for the current price.\n  const candlestickOptions = {\n    chart: {\n      type: \"candlestick\",\n      height: 350,\n      background: \"#000\", // Dark background\n      foreColor: \"#fff\",  // White text\n    },\n    annotations: {\n        yaxis: currentPrice !== null ? [\n          {\n            y: currentPrice,\n            borderColor: \"white\", \n            label: {\n              text: `Price: ${currentPrice}`,\n              style: {\n                fontSize: \"12px\",\n                color: \"#fff\",\n                background: \"transparent\"  \n              },\n              borderColor: \"transparent\"   \n            }\n          }\n        ] : []\n      },\n    title: {\n      text: \"Real-Time Spot Chart\",\n      align: \"center\",\n      offsetY: 10, // adds 20px spacing from the top\n      style: {\n        color: \"#fff\",\n      },\n    },\n    xaxis: {\n      type: \"datetime\",\n      labels: {\n        formatter: function (val) {\n          return new Date(val).toLocaleString(\"en-IN\", {\n            timeZone: \"Asia/Kolkata\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          });\n        },\n      },\n    },\n    yaxis: {\n      tooltip: {\n        enabled: true,\n      },\n    },\n    grid: {\n      show: false, // Remove grid lines\n    },\n    // Removed global candlestick color settings to allow per-candle styling.\n  };\n\n  // Prepare candlestick series with hollow candle logic.\n  const candlestickSeries = [\n    {\n      data: candleData.map((candle) => {\n        const open = candle.y[0];\n        const close = candle.y[3];\n        if (close >= open) {\n          // Bullish candle: hollow look (fill same as background, outlined in green).\n          return {\n            x: candle.x,\n            y: candle.y,\n            fillColor: \"#000\",    // Matches chart background for a hollow effect\n            lineColor: \"#00B746\", // Upward (green) color outline\n          };\n        } else {\n          // Bearish candle: fully filled with red.\n          return {\n            x: candle.x,\n            y: candle.y,\n            fillColor: \"#EF403C\", // Filled red\n            lineColor: \"#EF403C\",\n          };\n        }\n      }),\n    },\n  ];\n\n  // Create volume data from candleData.\n  const volumeData = candleData.map((candle) => {\n    const open = candle.y[0];\n    const close = candle.y[3];\n    return {\n      x: candle.x,\n      y: candle.volume,\n      fillColor: close >= open ? \"#00B746\" : \"#EF403C\",\n    };\n  });\n\n  // Volume chart options with dark theme and no grid lines.\n  const volumeOptions = {\n    chart: {\n      type: \"bar\",\n      height: 100,\n      background: \"#000\",\n      foreColor: \"#fff\",\n    },\n    plotOptions: {\n      bar: {\n        columnWidth: \"80%\",\n        colors: {\n          ranges: [\n            {\n              from: -1000,\n              to: 1000000000,\n              color: undefined,\n            },\n          ],\n        },\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    xaxis: {\n      type: \"datetime\",\n    },\n    yaxis: {\n      labels: {\n        show: false,\n      },\n      title: {\n        text: undefined,\n      },\n    },\n    grid: {\n      show: false,\n    },\n  };\n\n  const volumeSeries = [\n    {\n      name: \"Volume\",\n      data: volumeData,\n    },\n  ];\n\n  return (\n    <div>\n      <Chart\n        options={candlestickOptions}\n        series={candlestickSeries}\n        type=\"candlestick\"\n        height={500}\n      />\n      <Chart\n        options={volumeOptions}\n        series={volumeSeries}\n        type=\"bar\"\n        height={300}\n      />\n    </div>\n  );\n};\n\nexport default SpotQuotes;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}