{"ast":null,"code":"var _jsxFileName = \"/Users/siddhanthmate/Desktop/AllFiles/CODE/StatArbXchange/terminal/src/pages/quotes.js\",\n  _s = $RefreshSig$();\n// pages/Quotes.js\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\n\n// Connect to our backend Socket.IO server\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:4000');\nconst Quotes = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Price',\n      data: [],\n      fill: false,\n      backgroundColor: 'rgb(75, 192, 192)',\n      borderColor: 'rgba(75, 192, 192, 0.2)'\n    }]\n  });\n  useEffect(() => {\n    socket.on('redisData', data => {\n      let timestamp;\n      if (String(data.t).length === 13) {\n        timestamp = new Date(data.t);\n      } else {\n        timestamp = new Date(data.t * 1000);\n      }\n      const istTime = timestamp.toLocaleString(\"en-IN\", {\n        timeZone: \"Asia/Kolkata\"\n      });\n      setChartData(prevState => ({\n        labels: [...prevState.labels, istTime],\n        datasets: [{\n          ...prevState.datasets[0],\n          data: [...prevState.datasets[0].data, parseFloat(data.p)]\n        }]\n      }));\n    });\n    return () => {\n      socket.off('redisData');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Live Price Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Quotes, \"NbvN6ueeKABWW7Rqt2jlKYDa4Wc=\");\n_c = Quotes;\nexport default Quotes;\nvar _c;\n$RefreshReg$(_c, \"Quotes\");","map":{"version":3,"names":["React","useEffect","useState","io","Line","jsxDEV","_jsxDEV","socket","Quotes","_s","chartData","setChartData","labels","datasets","label","data","fill","backgroundColor","borderColor","on","timestamp","String","t","length","Date","istTime","toLocaleString","timeZone","prevState","parseFloat","p","off","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/siddhanthmate/Desktop/AllFiles/CODE/StatArbXchange/terminal/src/pages/quotes.js"],"sourcesContent":["// pages/Quotes.js\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\n\n// Connect to our backend Socket.IO server\nconst socket = io('http://localhost:4000');\n\nconst Quotes = () => {\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Price',\n      data: [],\n      fill: false,\n      backgroundColor: 'rgb(75, 192, 192)',\n      borderColor: 'rgba(75, 192, 192, 0.2)',\n    }]\n  });\n\n  useEffect(() => {\n    socket.on('redisData', (data) => {\n      let timestamp;\n      if (String(data.t).length === 13) {\n        timestamp = new Date(data.t);\n      } else {\n        timestamp = new Date(data.t * 1000);\n      }\n      \n      const istTime = timestamp.toLocaleString(\"en-IN\", { timeZone: \"Asia/Kolkata\" });\n      \n      setChartData(prevState => ({\n        labels: [...prevState.labels, istTime],\n        datasets: [{\n          ...prevState.datasets[0],\n          data: [...prevState.datasets[0].data, parseFloat(data.p)]\n        }]\n      }));\n    });\n\n    return () => {\n      socket.off('redisData');\n    }\n  }, []);\n\n  return (\n    <div>\n      <h2>Live Price Chart</h2>\n      <Line data={chartData} />\n    </div>\n  );\n};\n\nexport default Quotes;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,kBAAkB;AACjC,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAO,eAAe;;AAEtB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,CAAC;AAE1C,MAAMK,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC;IACzCU,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,CAAC;MACTC,KAAK,EAAE,OAAO;MACdC,IAAI,EAAE,EAAE;MACRC,IAAI,EAAE,KAAK;MACXC,eAAe,EAAE,mBAAmB;MACpCC,WAAW,EAAE;IACf,CAAC;EACH,CAAC,CAAC;EAEFjB,SAAS,CAAC,MAAM;IACdM,MAAM,CAACY,EAAE,CAAC,WAAW,EAAGJ,IAAI,IAAK;MAC/B,IAAIK,SAAS;MACb,IAAIC,MAAM,CAACN,IAAI,CAACO,CAAC,CAAC,CAACC,MAAM,KAAK,EAAE,EAAE;QAChCH,SAAS,GAAG,IAAII,IAAI,CAACT,IAAI,CAACO,CAAC,CAAC;MAC9B,CAAC,MAAM;QACLF,SAAS,GAAG,IAAII,IAAI,CAACT,IAAI,CAACO,CAAC,GAAG,IAAI,CAAC;MACrC;MAEA,MAAMG,OAAO,GAAGL,SAAS,CAACM,cAAc,CAAC,OAAO,EAAE;QAAEC,QAAQ,EAAE;MAAe,CAAC,CAAC;MAE/EhB,YAAY,CAACiB,SAAS,KAAK;QACzBhB,MAAM,EAAE,CAAC,GAAGgB,SAAS,CAAChB,MAAM,EAAEa,OAAO,CAAC;QACtCZ,QAAQ,EAAE,CAAC;UACT,GAAGe,SAAS,CAACf,QAAQ,CAAC,CAAC,CAAC;UACxBE,IAAI,EAAE,CAAC,GAAGa,SAAS,CAACf,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,EAAEc,UAAU,CAACd,IAAI,CAACe,CAAC,CAAC;QAC1D,CAAC;MACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO,MAAM;MACXvB,MAAM,CAACwB,GAAG,CAAC,WAAW,CAAC;IACzB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEzB,OAAA;IAAA0B,QAAA,gBACE1B,OAAA;MAAA0B,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzB9B,OAAA,CAACF,IAAI;MAACW,IAAI,EAAEL;IAAU;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAAC3B,EAAA,CA3CID,MAAM;AAAA6B,EAAA,GAAN7B,MAAM;AA6CZ,eAAeA,MAAM;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}